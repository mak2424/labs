В файле main.cpp лабораторной работы 1 приведен код перемножения матриц.
Для выполнения работы при каждом входе на кластер следует подключать актуальную версию компилятора, для этого выполните команду:
module load gcc
Проверить текущую версию можно командой:
gcc -v
Актуальная версия, установленная на кластере 5.3.0

1. Скопируйте файлы с лабораторной работой в свою локальную папку командой (включая точку):
cp -r /share/optimisationLabs/lab1 .

2. Перейдите в скопированную папку с лабораторной работой
cd lab1

3. Ознакомьтесь с исходным кодом программы
cat main.cpp

4. Скомпилируйте программу
g++ main.cpp -o base.o
(параметр -o задаёт имя бинарного скомпилированного файла)

5. Запустите программу и запишите время выполнения
srun ./base.o
(команда srun запускает программу в очереди выполнения на доступных узлах кластера)

6. Ознакомьтесь с параметрами оптимизации компилятора, они доступны в официальной документации:
https://gcc.gnu.org/onlinedocs/gcc-5.5.0/gcc/Optimize-Options.html#Optimize-Options
(параметры -O0 ... -O5)

7. Скомпилируйте программу с различными уровнями оптимизации, проверьте время выполнения для каждого уровня.

8. Ознакомьтесь с флагами, которые включает параметр -O (в документации). Подберите наиболее оптимальный набор флагов оптимизации программы, чтобы достичь максимального времени выполнения

Вопросы:
1. Какой из уровней оптимизации -O0 ... -O5 оказался наиболее эффективным для нашей программы?
2. Почему может случиться так, что более высокая оптимизация замедляет программу? Почему это случилось в случае с нашим кодом?
3. Определите какой конкретно параметр (или несколько параметров) оптимизации, включаемый командой -O негативно повлиял на время выполнения.