В файле main.cpp лабораторной работы 2 приведен код перемножения матриц. Тот же код, что и для лабораторной работы 1.

Модифицируйте код программы таким образом, чтобы добиться скорости выполнения менее 1 секунды на вычислительном кластере.

Для этого необходимо применить следующие оптимизации:
1. Избавиться из запуска лишних функций внутри циклов
2. Изменить порядок обхода цикла при перемножении
3. Добавить openmp оптимизацию для циклов
4. Применить флаги компилятора, полученные при выполнении предыдущей лабораторной работы

При выполнении Openmp кода, затраченное время будет отображаться некорректно. Корректное время выполнения можено получить любым из следующих способов:
1. Использовать функцию gettimeofday(), пример кода ниже:
	struct timeval start, end;
	gettimeofday(&start, NULL);
	// benchmark code
	gettimeofday(&end, NULL);
	delta = ((end.tv_sec  - start.tv_sec) * 1000000u + 
	         end.tv_usec - start.tv_usec) / 1.e6;
Команда доступна только на linux-платформах.
2. Использовать функцию omp_get_wtime() вместо clock(), которая возвращает double значение количества секунд с момента запуска.
3. Перед запуском программы добавить команду 'time'. прим.: 
	time srun ./base.o 
Параметр 'real' в пользовательском выводе выдаст время исполнения команды. Команда будет считать и время, затраченное системой очередей на запуск программы. Если очередь будет занята, время простоя тоже учтется.


Для выполнения работы при каждом входе на кластер следует подключать актуальную версию компилятора, для этого выполните команду:
module load gcc
Проверить текущую версию можно командой:
gcc -v
Актуальная версия, установленная на кластере 5.3.0

Вопросы:
1. Какая из предложенных оптимизаций сильнее всего повлияла на время выполнения?
2. Почему функция clock() показывает бОльшее время, чем затрачено в реальности на выполнение программы? Что лишнего подсчитывает функция clock()?
3. Что сделала технология openmp с нашим кодом для ускорения программы?
